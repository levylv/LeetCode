class Solution {
    public int lengthOfLongestSubstring(String s) {
        if (s == null) return 0;
        if (s.length() == 0) return 0;
        int i = 0, j = 1;
        int max = 1;
        int length;
        Map<Character, Integer> map = new HashMap<Character, Integer>();
        map.put(s.charAt(0), 0);
        while (i <= j && j < s.length()) {
            if (!map.containsKey(s.charAt(j)) || (map.get(s.charAt(j)) < i)) {
                length = j - i + 1;
                if (length > max) { max = length;}
            } else {
                i = map.get(s.charAt(j)) + 1;
            }
            map.put(s.charAt(j), j);
            j++;
        }

        return  max;
    }
}

//runtime:8 ms
//memory:39.9 MB
