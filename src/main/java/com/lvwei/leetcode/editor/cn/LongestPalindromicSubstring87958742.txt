class Solution {
    public String longestPalindrome(String s) {
        if (s == null || s.length() <= 1) return s;
        int n = s.length();
        int left = -1, right = -1, max = 0;
        boolean[][] dp = new boolean[n][n];
        for (int j = 0; j < n; j++) {
            for (int i = 0; i + j < n; i++) {
                if (j == 0) {
                    dp[i][i+j] = true;
                } else if (j == 1) {
                    if (s.charAt(i) == s.charAt(i+j)) {
                        dp[i][i+j] = true;
                    }
                } else {
                    if (s.charAt(i) == s.charAt(i+j)) {
                        dp[i][i+j] = dp[i+1][i+j-1];
                    }
                }

                if (dp[i][i+j] && (j+1) > max) {
                    max = j+1;
                    left = i;
                    right = i+j+1;
                }

            }
        }
  
        return s.substring(left, right);
    }
}
//runtime:144 ms
//memory:42.7 MB
